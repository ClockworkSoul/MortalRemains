// shop.c
// A basic shop with a basic storeroom.
// Written by Mobydick@TMI-2, 8-25-92
// Heavily modified by Chronos@DarkTowers, 5/95.
// The shop commands are now as follows: 
//  list - Lists all objects in store.
//  list all <item> - Lists all items matching string.
//  value <item> - Values an item.
//  value all - Values everything in your inventory.
//  sell <item> - Sells an item.
//  sell all unused - Sells all items that are not worn or wielded
//  sell all <item> - Sells all of <item> type.
//  buy <item> - Buys an item.
//  buy <item> <#> - Buys 'sword 3' (for example).. it buys the
//                   sword you designate, eliminating the problem
//                   of players have to buy all the swords to get
//                   to the ones on the bottom of the list.
// browse <item> - Allows exa'ing of items before buying.
// browse <item> <#> - Allows exa'ing of specific item in shop.

#include <move.h>
#include <mudlib.h>
#include <money.h>

int buy_item(object ob) ;
int value_item(object ob) ;
int sell_item(object ob) ;

#define NUM_STR ({ "Zero", "One", "Two", "Three", "Four", "Five", "Six", \
"Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", \
"Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", \
"Eighteen", "Nineteen", "Twenty" })

inherit ROOM ;
inherit COINVALUE ;

object storeroom ;
object ob,ob2 ;
int no_warehouse;

void create() {
  seteuid(getuid()) ;
  ::create() ;
  // If we need a warehouse, make sure it is loaded.
  if(!query("no_warehouse") ) CENTSTORE->frog() ;
}

void init() {
  add_action("help", "help");
  add_action("browse", "browse");
  add_action("list", "list") ;
  add_action("value", "value") ;
  add_action("buy", "buy") ;
  add_action("sell", "sell") ;
  add_action("enter_storeroom", "storeroom") ;
}

int list(string duh) {
  int i, ii, blah, j, k, match;
  string str, foo, item;
  string *arr, *shorts, *coins ;
  int *number, *price ;
  mixed *value ;
  object *frog ;

  if (duh) blah = sscanf(duh, "all %s", item);

  write ("The following objects are for sale:\n") ;
  frog = all_inventory(storeroom); 
  if(!(query("no_warehouse"))) 
    frog+=all_inventory(find_object_or_load(CENTSTORE)) ;
  shorts = ({ }) ;
  coins = ({ }) ;
  number = ({ }) ;
  price = ({ }) ;
  for (i=0;i<sizeof(frog);i++) {
    str = (string)frog[i]->query("short") ;
    if (str[0..1]=="a ") str=str[2..-1] ;
    if (str[0..2]=="an ") str=str[3..-1] ;
    if (str[0..3]=="the ") str=str[4..-1] ;
    if (blah) {
      arr = explode(str, " ");
      match = 0;
      for(ii=0;ii<sizeof(arr);ii++) 
        if (lower_case(item) == lower_case(arr[ii])) match = 1;
      if (!match) continue;
    }
    value = (mixed *)frog[i]->query("value") ;
    if (!value || sizeof(value)!=2) continue ;
    j = -1 ;
    for (k=0;k<sizeof(shorts);k++) {
      if (str==shorts[k] && value[0]==price[k] && value[1]==coins[k]) {
        j = k ;
        continue ;
      }
    }
    if (j==-1) {
      shorts += ({ str }) ;
      number += ({ 1 }) ;
      value = frog[i]->query("value") ;
      price += ({ value[0] }) ;
      coins += ({ value[1] }) ;
    } else {
      number[j] += 1 ;
    }
  }
  for (i=0;i<sizeof(shorts);i++) {
    if (number[i]>20) {
      foo = "Many" ;
    } else {
      foo = NUM_STR[number[i]] ;
    }
    foo += " " ;
    if (number[i]==1) {
      foo += shorts[i] ;
    } else {
      foo += pluralize(shorts[i]) ;
    }
    write (sprintf("   %-42s %d %s\n",foo,price[i],coins[i])) ;
  }
  return 1 ;
}

int buy(string str) {
  string item, *arr;
  int number, i, ii, match;
  object ob, *all_items;

// You need an argument for this function.
  if (!str) {
    write("What would you like to buy?\n");
    return 1;
  }
// Okay, we know they entered SOMETHING now.
// Was it a "item #" format?
  if (sscanf(str, "%s %d", item, number) == 2) {
// If so... 
// Check central storage, if it don't exist, try the storeroom.
   all_items = all_inventory(storeroom);
   if (!query("no_warehouse")) 
     all_items+=all_inventory(find_object(CENTSTORE));
   else all_items = all_inventory(storeroom);
// Reset the match variable.
   match = 0;
// Do this loop for every item in the shop.
   for(i=0;i<sizeof(all_items);i++) {
// Put all the words in the item's short into an array.
   arr = explode((string)all_items[i]->query("short"), " ");
// Begin the loop to compare each word to the item requested.
   for(ii=0;ii<sizeof(arr);ii++) 
     if (lower_case(item) == lower_case(arr[ii])) {
// It matches, increment the match variable.
        match++;
// If we've hit the correct item, make ob point to the current item.
        if (match == number) ob = all_items[i];  
      }
    }
// If match still = 0, we didn't find one.
    if (match == 0) {
      write("We don't have any '" + str + "' for sale.\n");
      return 1;
    }
// If match is less than the number requested, we didn't find a sword 3.    
    if (match < number) {
      write("We don't have a '"+str+"' for sale.\n");
      return 1;
    }
  } else {
// If we get here, they didn't use the "item #" format.
// Is the object in the storeroom?
    if(!query("no_warehouse") ) ob = present(str,find_object(CENTSTORE)) ;
    if (!ob) ob = present (str,storeroom) ;
    if (!ob) {
  // Guess we don't have one of those.
       write("We don't have one of those for sale.\n");
      return 1 ;
    }
  }
  // We should have found an item to sell them if we got to this point.
  buy_item(ob);
  return 1;
}

int browse(string str) {
  string item, *arr;
  int number, i, ii, match;
  object ob, *all_items;

  // Check to see if they just typed 'browse'.
  if (!str) {
    write("What would you like to browse?\n");
    return 1;
  }
  // Okay, we know they entered SOMETHING now.
  // Was it a "item #" format?
  if (sscanf(str, "%s %d", item, number) == 2) {
  // If so... 
  // Check central storage, if it don't exist, when the storeroom.
   all_items = all_inventory(storeroom);
   if (!query("no_warehouse")) all_items+=all_inventory(find_object(CENTSTORE));
    else all_items = all_inventory(storeroom);
  // Reset the match variable.
    match = 0;
  // Do this loop for every item in the shop.
    for(i=0;i<sizeof(all_items);i++) {
  // Put all the words in the item's short into an array.
      arr = explode((string)all_items[i]->query("short"), " ");
  // Begin the loop to compare each word to the item requested.
      for(ii=0;ii<sizeof(arr);ii++) 
      if (lower_case(item) == lower_case(arr[ii])) {
  // It matches, increment the match variable.
        match++;
  // If we've hit the correct item, make ob point to the current item.
        if (match == number) ob = all_items[i];  
      }
    }
  // If match still = 0, we didn't find one.
    if (match == 0) {
      write("We don't have a '" + str + "' for sale.\n");
      return 1;
    }
  // If match is less than the number requested, we didn't find a sword 3.    
    if (match < number) {
      write("We don't have a '"+str+"' for sale.\n");
      return 1;
    }
  } else {
  // If we get here, they didn't use the "item #" format.
  // Is the object in the storeroom?
    if(!query("no_warehouse") ) ob = present(str,find_object(CENTSTORE)) ;
    if (!ob) ob = present (str,storeroom) ;
    if (!ob) {
  // Guess we don't have one of those.
       write("We don't have one of those for sale.\n");
      return 1 ;
    }
  }
  // We should have found an item if we got to this point.
  write("The shopkeeper hands you "+ob->query("short")+ 
    " for your inspection.\n");
  write("Looking closely, you see:\n"+(string)ob->query("long"));
  say("The shopkeeper hands "+ob->query("short")+" to " +
       this_player()->query("cap_name")+" for " + 
      possessive(this_player()->query("gender")) + " inspection.\n");
  return 1;
}

int buy_item(object ob) {
  int number, i, j, k, l, has, res ;
  string type ;
  string *types ;
  mixed *value ;
  int oldval, newval, newnum, leftnum ;

// Added by Chronos to make sure items that shouldn't be in the shop
// are removed when found.  :)

  if (ob->query("destruct_when_sold")) {
    write("That item should not have been in the shop.\n");
    ob->remove();
    return 1;
  }
  value = ob->query("value") ;
  
// Objects with no value have no business being in the shop.

  if (!value) {
    write("That item should not have been in the shop.\n");
    ob->remove() ;
    return 1 ;
  }
  type = value[1] ;
  number = value[0] ;
  if (number==0) {
    write("That item should not have been in the shop.\n");
    ob->remove() ;
    return 1 ;
  }

// Check to see if the player has exact change.

  i = this_player()->query("wealth/"+type) ;
  if (i>=number) {
    this_player()->set("wealth/"+type,i-number) ;
    j = this_player()->query("capacity") ;
    this_player()->set("capacity", j+number) ;
// See if the player can carry the object.
    res = ob->move(this_player()) ;
    if (res==MOVE_OK) {
     write("The shopkeeper hands you "+(string)ob->query("short")+".\n");
      say (this_player()->query("cap_name")+" buys "+ob->query("short")+".\n") ;
      return 1 ;
    } else {
// Give him his money back.
      this_player()->set("wealth/"+type,i) ;
      this_player()->set("capacity",j) ;
      write ("You cannot carry that object.\n") ;
      return 1 ;
    }
// The rest of the procedure tries to let the player use other combinations
// of coins to buy the object. Clever players can use this to convert coins
// for free, by buying a 50 silver coin object for 5 gold and then selling
// it back for 50 silver. If you don't want this to happen, either have the
// shops return less than exact value on sales, or rip out the following
// code.

// Check to see if this is a convertable type of coin. If it isn't then
// the player cannot buy the object.

  types = cointypes() ;
  j = member_array (type,types) ;
  if (j==-1) {
    write("You don't have " + number + " " +
      type+" and the shop cannot convert that to other coins.\n") ;
    return 1 ;
  }

// Check to see if he has enough total wealth to buy the object. If he
// doesn't we can save a lot of CPU time by giving up now.

  res = this_player()->total_wealth() ;
  k = this_player()->query("wealth/"+type) ;
  oldval = coinvalue(type) ;
  if (res<k*oldval) {
    write ("You can't afford that!\n") ;
    return 1 ;
  }

// First check higher-valued coins, lowest to highest, to see if the player
// can buy the object exactly for some combination of the higher-valued
// coin and the stated coin.

  for (i=j-1;i>=0;i--) {
    newval = coinvalue(types[i]) ;
    newnum = (oldval*number)/newval ;
    leftnum = ((oldval*number)-(newnum*newval))/oldval ;
  
// If the player has enough of the new type, he buys the item.

    has = this_player()->query("wealth/"+types[i]) ;
    if (has>=newnum && k>=leftnum) {
      this_player()->set("wealth/"+types[i],has-newnum) ;
      this_player()->set("wealth/"+type,k-leftnum) ;
      l = this_player()->query("capacity") ;
      this_player()->set("capacity",l+newnum+leftnum) ;
      res = ob->move(this_player()) ;
      if (res==MOVE_OK) {
        write ("The shopkeeper hands you "+(string)ob->query("short")+".\n") ;
        say (this_player()->query("cap_name")+" buys "+ob->query("short")+".\n") ;
        return 1 ;
      } else {
        this_player()->set("wealth/"+types[i],has) ;
        this_player()->set("wealth/"+type,k) ;
        this_player()->set("capacity",l) ;
        write ("You cannot carry that object.\n") ;
        return 1 ;
      }
    }

// If that didn't work, try using all the player has of the stated coin, plus
// as many of the new coin type as necessary.

      newnum = (oldval*(number-k))/newval ;

      if ((oldval*number)-(newval*newnum)>(k*oldval)) newnum = newnum + 1 ;
      leftnum = ((oldval*number)-(newnum*newval))/oldval ;
  
      has = this_player()->query("wealth/"+types[i]) ;
      if (has>=newnum && k>=leftnum) {
        this_player()->set ("wealth/"+types[i],has-newnum) ;
        this_player()->set("wealth/"+type,k-leftnum) ;
        l = this_player()->query("capacity") ;
        this_player()->set("capacity",l+newnum+leftnum) ;
        res = ob->move(this_player()) ;
        if (res==MOVE_OK) {
          write ("The shopkeeper hands you "+(string)ob->query("short")+".\n") ;
          say (this_player()->query("cap_name")+" buys "+ob->query("short")+".\n") ;
          return 1 ;
      } else {
        this_player()->set("wealth/"+types[i],has) ;
        this_player()->set("wealth/"+type,k) ;
        this_player()->set("capacity",l) ;
        write ("You cannot carry that object.\n") ;
        return 1 ;
      }
    }

// If neither of those two worked, give up and try the next coin type.

  }

// Higher types didn't work. Now we try all less valuable coin types and
// see if we can buy it for all he possesses of the stated type plus some
// of the lower-valued type.

for (i=j+1;i<sizeof(types);i++) {
  newval = coinvalue(types[i]) ;
  newnum = ((number-k)*oldval)/newval ;
  has = this_player()->query("wealth/"+types[i]) ;
  if (has>=newnum) {
  this_player()->set("wealth/"+types[i],has-newnum) ;
  this_player()->set("wealth/"+type,0) ;
  l = this_player()->query("capacity") ;
  this_player()->set("capacity",l+k+newnum) ;
  res = ob->move(this_player()) ;
  if (res==MOVE_OK) {
    write ("The shopkeeper hands you "+(string)ob->query("short")+".\n") ;
    say (this_player()->query("cap_name")+" buys "+ob->query("short")+".\n") ;
    return 1 ;
  } else {
    this_player()->set("wealth/"+types[i],has) ;
    this_player()->set("wealth/"+type,k) ;
    this_player()->set("capacity",l) ;
    write ("You cannot carry that object.\n") ;
    return 1 ;
  }
}
// If that didn't work, try the next coin type.
}

// OK, it looks like he can't buy it for exact change. Now, try all the
// higher types again, this time giving whatever change is necessary.

  for (i=j-1;i>=0;i--) {
    newval = coinvalue(types[i]) ;
    newnum = (oldval*number)/newval ;
    if ((oldval*number)-(newval*newnum)>0) newnum = newnum + 1 ;
    leftnum = ((newval*newnum)-(oldval*number))/oldval ;
    has = this_player()->query("wealth/"+types[i]) ;
    if (has>=newnum) {
      this_player()->set("wealth/"+types[i],has-newnum) ;
      this_player()->set("wealth/"+type,k+leftnum) ;
      l = this_player()->query("capacity") ;
      this_player()->set("capacity",l+newnum-leftnum) ;
      res = ob->move(this_player()) ;
      if (res==MOVE_OK) {
        write ("The shopkeeper hands you "+(string)ob->query("short")+".\n") ;
        say (this_player()->query("cap_name")+" buys "+ob->query("short")+".\n") ;
        return 1 ;
      } else {
        this_player()->set("wealth/"+types[i],has) ;
        this_player()->set("wealth/"+type,k) ;
        this_player()->set("capacity",l) ;
        write ("You cannot carry that object.\n") ;
        return 1 ;
      }
    }

//  That didn't work, so try the next type.

    }

// That's enough of this. We give up: he can't buy it from us.
    
    write("You don't have the right coins to buy that.\n");
    return 1 ;
  }
}


int value(string str) {
  int i;
  object *ob, obj ;

  if (!str) {
    write("Value what?\n");
    return 1;
  }
  if (str == "all") {
    ob = all_inventory(this_player()) ;
    if (!ob) {
      write("You don't have any belongings.\n");
      return 1 ;
    }
    for (i=0;i<sizeof(ob);i++) value_item(ob[i]);
    return 1 ;
  }
  obj = present(str,this_player()) ;
  if (!obj) {
    notify_fail ("You don't have a "+str+".\n") ;
    return 0 ;
  }
  value_item(obj);
  return 1 ;
}

int value_item(object ob) {
  string word ;
  string *types ;
  int i, number, changenum ;
  string type, changetype ;
  mixed *value ;
  int newval, oldval, newnum, j ;
  value = ob->query("value");
  printf("%-28s: ", ob->query("short"));
  if (!value) {
    write("That item has no value.\n");
    return 1;
  }
  type = value[1] ;
  number=value[0] ;
  if (number==0) {
    write("That item has no value.\n");
    return 1;
  }
 
// If it's a coin we can make change for, we multiply by the sales fraction
// and calculate how much to give back of the stated coin and the lower-
// valued coin. If it's the lowest value coin, or if it's not list with
// coinvalue.c, we just take off the fraction and sell for that.

  types = cointypes() ;
  j = member_array(type,types) ;
  if (j==-1 || j==sizeof(types)-1) {
    newnum = number*SHOP_SALES_FRAC ;
    if (newnum==0) newnum=1 ;
    if (newnum==1) word="coin" ; else word="coins" ;
    write("It is worth "+newnum+" "+type+" "+word+".\n");
  } else {
    changetype = types[j+1] ;
    oldval = coinvalue(type) ;
    newval = coinvalue(changetype) ;
    newnum = (number*oldval*SHOP_SALES_FRAC)/oldval;
    changenum = ((number*oldval*SHOP_SALES_FRAC)-(newnum*oldval))/newval ;
    if (newnum==1) word="coin" ; else word="coins" ;
  write("It is worth "+newnum+" "+type+" "+word);
    if (changenum==0) write(".\n") ;
    else {
    if (changenum==1) word="coin" ; else word="coins" ;
    write (" and "+changenum+" "+changetype+" "+word+".\n") ;
    }
  }
  return 1;
}


int sell(string str) {
  string work;
  string *arr;
  int i, ii, match;
  object ob ;
  object *obs ;

  if (!str) {
    write("Sell what?\n");
    return 1 ;
  }
  
  if (sscanf(str, "all %s", work) == 1) {
    if (work == "unused") {
      obs = all_inventory(this_player()) ;
      for (i=0;i<sizeof(obs);i++) {
        if (obs[i]->query("worn")) continue;
        if (obs[i]->query("wielded")) continue;
        sell_item(obs[i]);
      }
      return 1;
    }
    obs = all_inventory(this_player()) ;
    for (i=0;i<sizeof(obs);i++) {
      arr = explode((string)obs[i]->query("short"), " ");
      match = 0;
   for (ii=0;ii<sizeof(arr);ii++) 
       if (lower_case(work) == lower_case(arr[ii])) match = 1;
      if (!match) continue;
      sell_item(obs[i]);
    }
  }
  if (str=="all") {
    obs = all_inventory(this_player());
    for (i=0;i<sizeof(obs);i++) sell_item(obs[i]);
    return 1;
  }
  ob = present(str,this_player()) ;
  if (!ob) {
    notify_fail("You don't have one to sell!\n") ;
    return 1 ;
  }
  sell_item(ob);
  return 1 ;
}

int sell_item(object ob) {
  int j, l, res ;
  int newnum, changenum ;
  int oldval, newval ;
  string changetype, work ;
  string *types ;
  string type, word;
  mixed *value ;
  int number ;
  value = ob->query("value") ;
    printf("%-28s: ", ob->query("short"));
  if (!value) {
  write("That item has no value.\n");
    return 1 ;
  }
  number=value[0] ;
  if (number<1) {
    write("That item has no value.\n");
    return 1 ;
  }
  if (ob->query("prevent_drop")) {
   write("The shop cannot buy that item.\n");
    return 1 ;
  }
  type = value[1] ;
  res = ob->move(storeroom) ;
  if (res != MOVE_OK) {
    write("You cannot sell that!\n");
    return 1 ;
  }
  res = (int)this_player()->query("wealth/"+type) ;
  if (number==0) {
    write("That item has no value.\n");
    return 1 ;
  }
  types = cointypes() ;
  j = member_array(type,types) ;
  if (j==-1 || j==sizeof(types)-1) {
    newnum = number*SHOP_SALES_FRAC ;
    if (newnum==0) newnum=1 ;
    l = this_player()->query("capacity") ;
    if (l<newnum) {
   write("You can't carry the coins you'd receive for selling it!\n");
      ob->move(this_player()) ;
      return 1 ;
    }
    if (newnum==1) word="coin" ; else word="coins" ;
    write("Sold for "+newnum+" "+type+" "+word+".\n");
    say (this_player()->query("cap_name")+" sells a "+
      ob->query("short")+".\n") ;
    this_player()->set("wealth/"+type,newnum+res) ;
    this_player()->set("capacity",l-newnum) ;
   } else {
    changetype = types[j+1] ;
    oldval = coinvalue(type) ;
    newval = coinvalue(changetype) ;
    newnum = (number*oldval*SHOP_SALES_FRAC)/oldval;
    changenum = ((number*oldval*SHOP_SALES_FRAC)-(newnum*oldval))/newval ;
    l = this_player()->query("capacity") ;
    if (l<newnum+changenum) {
      write("You can't carry the coins you'd receive for selling it.\n");
      ob->move(this_player()) ;
      return 1 ;
    }
    if (newnum==1) word="coin" ; else word="coins" ;
    write("Sold for "+newnum+" "+type+" "+word);
    say (this_player()->query("cap_name")+" sells a "+ob->query("short")+".\n") ;
    this_player()->set("wealth/"+type,newnum+res) ;
    if (changenum==0) {
      write (".\n") ;
    } else {
      if (changenum==1) word="coin" ; else word="coins" ;
      write (" and "+changenum+" "+changetype+" "+word+".\n");
      res = this_player()->query("wealth/"+changetype) ;
      this_player()->set("wealth/"+changetype,changenum+res) ;
    }
    this_player()->set("capacity",l-newnum-changenum) ;
  }
  // Added by Chronos to make the shop hide items when they have the
  // "destruct_when_sold" property.
    if (ob->query("destruct_when_sold")) {
      write("The shopkeeper hides the valuable item in the back room.\n");
      ob->remove();
    }
  return 1;
}

int enter_storeroom() {
  if (!wizardp(this_player())) return 0 ;
  write("The shopkeeper leads you to the storeroom.\n");
  this_player()->move(storeroom) ;
  return 1 ;
}

int help(string str) {
  if (str != "shop") return 0;
  write(@ENDHELP
The shop commands are now as follows: 
  
  list                          - Lists all objects in store.
  list all <item>               - Lists all items matching string.
  value <item>                  - Values an item.
  value all                     - Values everything in your inventory.
  sell <item>                   - Sells an item.
  sell all unused               - Sells all items that are not worn 
                                  or wielded
ENDHELP
  );
  write(@ENDHELP
  sell all <item>               - Sells all of <item> type.
  buy <item>                    - Buys an item.
  buy <item> <#>                - Buys 'sword 3' (for example).. it buys 
                                  the sword you designate, eliminating 
                                  the problem of players have to buy all 
                                  the swords to get to the ones on the 
                                  bottom of the list.
 browse <item>                  - Allows exa'ing of items before buying.
 browse <item> <#>              - Allows exa'ing of specific item in shop.

 If you have ANY problems with the new shop, contact Chronos!
ENDHELP
  );
  return 1;
}
