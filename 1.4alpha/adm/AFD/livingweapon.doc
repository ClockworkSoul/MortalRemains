// A Living Weapon, heavily commented to explain what all the properties
// it sets control.
// WRITTEN ON August 4,1995
// WRITTEN BY Lexander
// This is just a revision of the work done by Anar in the std weapon
// code, so most of this is his.

// Writing a 'living weapon' is almost exactly the same as any other
// weapon, however, you have more set() functions you can use.

// First, you can use any and all of the following:
// set("resist_move",1)  	Prevent weapon from leaving inventory
// set("resist_wield",1)	Prevent weapon from being wielded
// set("resist_unwield",1)	Prevent weapon from being unwielded
// set("resist_alive",1)        Prevent the weapon from being made 'alive'
// set("resist_unalive",1)      Prevent the weapon from being made 'unalive'
//
// Anything but 0 is TRUE, 0 is FALSE
// 
// set("alive",1) 		Make the weapon alive.
// set("alive",0)		Make the weapon unalive.
// set("living_power",<number>)
// In this case <number> is the amount of some stats (usually intellect)
// required to 'overpower' the intentions of the weapon.  In this case,
// if the stat equals or exceeds the 'living_power' then the user
// succeeds despite the intentions of the weapon.

// The 'abilities' of the weapon are not activated if the weapon
// does not have alive() called.  
// 
// You also have the following functions:
// move_fail_func()		Determines what happens if the move fails.
// wield_fail_func()		Determines what happens if the wield fails.
// unwield_fail_func()		Determines what happens if the unwield fails.
// alive_fail_func()		Determines what happens if the alive() fails.
// unalive_fail_func()		Determines what happens if the unalive() fails.
// alive_func()			Determines what happens if the alive() works.
// unalive_func()		Determines what happens if the unalive() works.
//
// alive()			The way to 'check' if it's legal to make the
//				item as opposed to just set("alive",1)
//				This is used in situations such as spells
//				when the weapon has a chance to resist.
// unalive()			The way to 'check' if it's legal to make the
//				item 'unalive' as opposed to set("alive",0)
//
// The last part deserves special mention:
// First, to allow a weapon to have special powers, you must first
// set("living_func",(["func1" :funct1chance,"func2",func2chance]));
// where func1 is a function to be executed if 'function1chance'
// percentage of the time.  If you set it to 100, then it always works.
//
// Then, you set("living_action_rate") which is the number of intervals
// (around 20 seconds, actually 10 heartbeats) that elapse between calls to 
// the functions in living_func.  This number should be relatively high 
// 
// These functions will ONLY occur if the weapon is alive.
// Finally, for these functions to work properly you MUST call
// set_alive() in create() which starts the heartbeat. This applies
// ONLY to objects that start alive.

#include <mudlib.h>

inherit LIVING_WEAPON;

void create() {
	set ("author","your_name_goes_here");
// ^ this must be included in your object as it must be included
// in any room you make.
	set ("id", ({ "weapon", "item of destruction" }) ) ;
// ^ how the player may reference the item may contain more then one
// id. example is set above ({"id","id","id"}) 
	set ("short", "a sturdy sword") ;
// ^ simplest description of the item
	set ("long", "It has a long blade which is very sharp.\n") ;
// ^ a more fleshed out description.
	set ("mass", 4000) ;
// ^ how much mass does the item have in Kilograms
	set ("bulk", 20) ;
// ^ how much space does the item take up in 
// milliliters/cubic centimeters
	set ("value", ({ 25, "gold" }) ) ;
// ^ what is the value of the item.
	set ("weapon", 6) ;
// ^ "weapon" is the attack class of the weapon. Anything with an 
// attack class of 0 is not a weapon. Things with positive numbers 
// are weapons. Higher numbers make it easier to hit the target.
	set ("damage", ({ 2,10 }) ) ;
// ^ "damage" is the weapon the damage does in the hands of a normal 
// user against an unarmored target. The first element of the array 
// is the minimum damage: the second element is the maximum. Actual
// damage is a random number drawn with equal probability from all 
// integers between the min and the max.

// "name" is the word the combat routine will use to identify the weapon
// in printing messages. Messages take the form, "You hit the big ugly orc
// with your <name>". The name should not begin with an article or this
// message will not be grammatical.
	set ("name", "sword") ;

// set_verbs sets the verbs that will be printed when the weapon is used
// in combat. Messages are of the form "You <verb> the monster" so if the
// verb requires a preposition, it needs to be in the string, as it is in
// the example "swing at".
	set_verbs( ({ "attack", "swing at", "stab at", "slash at" }) ) ;

// Verbs are conjugated by adding an "s" to the FIRST word in the string,
// thus, if you set the verb to be "swing at", the messages will print as:
// "You swing at an orc" "Mobydick swings at an orc." For most verbs this
// is fine, but in irregular cases it is not. In this case you can override
// the conjugator by calling set_verbs2 with the appropriate second verb.
// If none of the conjugations are irregular, this is not necessary.
	set_verbs2( ({ "attacks", "swings at", "stabs at", "slashes at" }) ) ;

// "second" allows the weapon to be used as a second weapon along with some
// other weapon. Daggers and similar small weapons should set this property
// to 1. Others should set it to 0.
	set("second", 0) ;

// "nosecond" prohibits the use of this weapon with a second weapon or a shield.
// Two-handed weapons should set this property to 1, others should leave it 0.
	set("nosecond",0) ;

// "type" controls which skill is used in determining hit chances when the
// weapon is used in an attack. MudOS comes with three types: thrusting,
// cutting, and blunt. You can add more by adding the appropriate skills.
// Make sure to use the weapon.guide in /doc/wizhelp.
	set ("type", "weapon type") ;

// "light" controls if the weapon is able to be a light source. It can
// be directly set here or you can set it so that the property is set
// by a function call <which is better quality>.

// "wield_func" tells the game which function to call when the weapon
// is wielded.
// set("wield_func","function_name");

// "unwield_func" same as wield except works for unwielding.
// set("unwield_func","function_name");

// "invisible" controls who can see this item presently the format is
// set at: 0- everyone can see it, 1- players can't see it, 2- wizards
// can't see it only admins can.
// set("invisible",0);

// "prevent_drop" controls if this item can be dropped <note: very
// good for cursed weapons> 0 it can, >0 it can't.
// set("prevent_drop",0);

// "prevent_get" controls if this item can be taken <note: good for 
// items players shouldn't have. 0 it can, >0 it can't.
// set("prevent_get",0);

// "prevent_insert" controls if this item can be place in another 
// object. 0 it can, >0 it can't.
// set("prevent_insert",0);

// "extra_look" gives the player a little more description. <note:
// good for effects>
// set("extra_look","wield's a mystic weapon");

// set_alive(); // Should only be called if weapon starts ALIVE.
}
// this function adds additional commands to the sword.
void init()
{
// add_action("function_name","command_name");
}
// functions called need to go here
