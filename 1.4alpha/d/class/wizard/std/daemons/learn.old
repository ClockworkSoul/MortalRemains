/*
** Learn Version 2.0
** The spell learning module for all wizards.
** Cyanide began this file 18 Aug 97.
*/

#include <m_spells.h>

#define FIND find_player("ilzarion")
#define DEBUG(x) if (FIND) tell_object(FIND, x)
#define MAX_SPELL_LEVEL 9

int get_max_spell_level(object);
string *get_spell_list (object);
void begin_learn(object);
string tell_options(object, string *); 
string input_spell (string, object, string *);

string *get_spell_list (object player) {
  int x, y, max_lvl=0, flag=0, maxes=4;
  string *tmp_spells, *oppositions, *known_spells, skool, 
    specialization = "none";
  string *spells = (({}),({}),({}),({}),({}), ({}),({}),({}),({}),({})),
   *list = spells;

  known_spells = player->query("mage_spells");
  if (!known_spells) known_spells = ({});

  max_lvl = get_max_spell_level(player);

  if (player->query("opposition_schools"))
    oppositions = player->query("opposition_schools");
  if (player->query("specialization"))
    specialization = player->query("specialization");
  else
    specialization = "none";
  if (specialization!="none") maxes++;
  if (player->query_skill("thaumaturgy")) maxes++;

  flag++;
  while(flag) {
    switch(flag) {
      case 1 : tmp_spells = UNIVERSAL; break;
      case 2 : tmp_spells = ABJURATION; break;
      case 3 : tmp_spells = ALTERATION; break;
      case 4 : tmp_spells = CONJURATION; break;
      case 5 : tmp_spells = DIVINATION; break;
      case 6 : tmp_spells = ENCHANTMENT; break;
      case 7 : tmp_spells = ILLUSION; break;
      case 8 : tmp_spells = INVOCATION; break;
      default : tmp_spells = NECROMANCY; flag = (-1); break;
    }

    // You may want to stop here and get a Tylenol.

   skool = (string)tmp_spells[0][0];
                               // The school name is kept at position
                               // 0 in the array. 1-9 is a list of 
                               // spells of that level.

    if (member_array(skool, oppositions)==-1) {   // If the school is'nt
      for (y=1; y<=max_lvl; y++) {                 // an opposition school
        for (x=sizeof(tmp_spells[y]);x>=0;x--)
          if (member_array(tmp_spells[y][x], known_spells) != -1)
        delete(tmp_spells[y], tmp_spells[y][x]);
        //    tmp_spells[y] = ({ (tmp_spells[y] - (string)tmp_spells[y][x] }); 
        for (x=sizeof(tmp_spells[y]);x>=0;x--)
          if ((skool==specialization || skool=="universal") || (!random(2)))
            (string *)spells[y] += ({ tmp_spells[y][x] });
      }
    } else
    continue;

    for (x=1;x<=MAX_SPELL_LEVEL;x++)

      while (sizeof(spells[x]) > maxes)
        spells[x] -= ({ spells[random(sizeof(spells[x]))] });  // Huh?

    flag++;
  }

  for (x=0;x<sizeof(spells);x++) {
    for (y=0;y<sizeof(spells[x]);y++) {
       DEBUG(spells[x][y]);
    }
    DEBUG("\n");
  }

  return spells;
  
}  // End get_spell_list()


void begin_learn (object player) {
int x,y;
  string *spell_list=({}), *spell_list_2d;

  if (player->query("next_spell_list"))
    spell_list_2d = player->query("next_spell_list");   // A 2-dimensional array
  else
    spell_list_2d = get_spell_list(player);

for (x=0;x<sizeof(spell_list_2d);x++)
  for (y=0;y<sizeof(spell_list_2d[x]);y++)
    DEBUG(spell_list_2d[x][y]+" ");

  player->set("next_spell_list", spell_list_2d);

  tell_object(player, tell_options(player, spell_list_2d));
  input_to("input_spell", player, spell_list);
}


string tell_options (object ob, string *s_list) {
  int x, y;
  string spew = "You may choose one of the following: \n";

  for (x=1; x<sizeof(s_list); x++)
    for (y=0; y<sizeof(s_list[x]); y++)
      s_list += ({ s_list[x][y] });
  
  for (x=1; x<=10; x++) {
    if (sizeof(s_list[x])) {
      spew += "Level "+x+": ";
      for (y=0; y<sizeof(s_list[x]); y++) {
        spew += capitalize((string)s_list[x][y]);
        if (y < (sizeof(s_list[x])-1))
          spew += ", ";
        else
          spew += "\n";
      }
    }
  }
  return spew;
}


string input_spell (string want, object ob, string *s_list) {
  want = lower_case(want);

  if (member_array(want, s_list)==-1) {
    tell_object(ob, "Sorry - That is not a valid choice.\n");
    return;
  }

  ob->add("spells_chosen", 1);
  ob->add("mage_spells", ({ want }) );
  tell_object(ob, wrap("After intense study, you add "+capitalize(want)+
    " to your spell repitoire."));
  ob->delete("next_spell_list");
  return;
}

int get_max_spell_level (object ob) {
  int lvl = (int)ob->query_level("wizard");
  if (lvl < 12) 
    lvl = (lvl+1)/2;
  else
    lvl /= 2;

  return lvl;
}
