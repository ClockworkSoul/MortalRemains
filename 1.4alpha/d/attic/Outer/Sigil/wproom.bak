#include <config.h>
#include <mudlib.h>
#include <skills.h>
#include "sigil.h"

inherit ROOM;

void create()
{
    ::create();
    seteuid( 0 );
    set( "light", 1 );
    set ("short","Weapon Proficiency Training Hall.");
    set( "long", @EndText
This is where you come to pick your weapon proficiencies.
Commands are: list , select <prof name>
EndText
    );
    set( "exits", ([
      "down" : SIGIL+"gymnasium.c",
"up" : SIGIL+"gymnasium2.c",
    ]) );
}
void init (){
    add_action ("list_prof", "list");
    add_action ("learn_prof", "select");
}
int list_prof() {
    int i, s ;
    mapping skills;
    write("Proficiency		 Slots\n");
    write("Long Blades		 1+\n");
    write("Short Blades		 1+\n");
    write("Axes			 1+\n");
    write("Clubbing Weapons	 1+\n");
    write("Staves			 1+\n");
    write("Whips			 1+\n");
    write("Polearms		 1+\n");
    write("Unarmed			 1+\n");
    write("Ambidexterity		 1\n");
    write("One Weapon Style	 1+\n");
    write("Two Weapon Style	 1+\n");
    write("Shield Style		 1+\n");
    write("Two Handed Style	 1+\n");

    write("------------------------------\n") ;
    return 1;
}
int learn_prof(string str) {
    int i, freeslots, lvl;
    string *skills;
    mixed selectable;
    freeslots = this_player()->query("wp_free");
    skills=explode(str, " ");
    if (this_player()->query_class()){
	selectable = (keys(SK_WP_FIGHTER));
    }  
    if ( this_player()->query_class() == "warrior"){
	selectable = (keys(SK_WP_FIGHTER));
	if ( this_player()->query_level("barbarian")){
	    selectable = (keys(SK_WP_BARBARIAN));
	}
	if ( this_player()->query_level("knight")){
	    selectable = (keys(SK_WP_KNIGHT));
	}
    }
    if ( this_player()->query_class() == "wizard"){
	selectable = (keys(SK_WP_MAGE));
    }
    if (this_player()->query_class() == "rogue"){
	selectable = (keys(SK_WP_THIEF));
    }
    if ( this_player()->query_class() == "priest"){
	selectable = (keys(SK_WP_CLERIC));
    }
    if ( this_player()->query_class() == "psionicist"){
	selectable = (keys(SK_WP_PSIONIC));
    }

    for (i=0;i<sizeof(skills); i++)
	skills[i]=capitalize(skills[i]);
    str = implode(skills, " ");
    i = (member_array(str, selectable));
    if (i == -1) {
	write("No such skill, or you cannot select that skill.\n");
	return 1;
    }

    if ( this_player()->query_class() == ""){
	selectable = (values(SK_WP_FIGHTER))[i];
	if ( this_player()->query_level("barbarian")){
	    selectable = (values(SK_WP_BARBARIAN))[i];
	}
    }  
    if ( this_player()->query_class() == "warrior"){
	selectable = (values(SK_WP_FIGHTER))[i];
    }
    if ( this_player()->query_class() == "wizard"){
	selectable = (values(SK_WP_MAGE))[i];
    }
    if (this_player()->query_class() == "rogue"){
	selectable = (values(SK_WP_THIEF))[i];
    }
    if ( this_player()->query_class() == "priest"){
	selectable = (values(SK_WP_CLERIC))[i];
    }

    if ( this_player()->query_class() == "psionicist"){
	selectable = (values(SK_WP_PSIONIC))[i];
    }

    if ( (this_player()->query_skill(str)) > (selectable-1)) {
	write ("You have reached maximum level for that skill!\n");
	return 1;
    }
    i = (this_player()->query_skill(str))+1 ;
    if (i == 3) {
	if ((this_player()->query_level())<6) {
	    write ("You must be 6th level for mastery.\n");
	    return 1;
	}
    }
    if (i == 4) {
	if ((this_player()->query_level())<12) {
	    write ("You must be 12th level for high mastery.\n");
	    return 1;
	}
    }
    if (i == 5) {
	if ((this_player()->query_level())<18) {
	    write ("You must be 18th level for grand mastery.\n");
	    return 1;
	}
    }
    if (freeslots<1){
	write ("Not enough free slots.\n");
	return 1;
    }


    if (str == "Unarmed"){


	if (TP->query_class("priest") && (!(TP->query("deity") == "oghma"))){
	    write ("Only Priests of Oghma are allowed to learn thew martial arts!\n");
	    return 1;
	}


	lvl = this_player()->query_level();
	switch(this_player()->query_skill(str)){
	case 0 :
	    this_player()->set("damage", ({ 2, 4 }));break;
	case 1 :
	    TP->set("damage", ({ 3, 6 }));
	    TP->set("unarmed_natt", 2);break;
	case 2 :
	    TP->set("damage", ({ 4, 8 }));
	    TP->set("unarmed_natt", 3);break;
	case 3 :
	    TP->set("damage", ({ 7, 12 }));break;
	case 4 :
	    TP->set("damage", ({ 9, 15 }));
	    TP->set("unarmed_natt", 4);break;
	}
    }

    this_player()->set_skill(str, (this_player()->query_skill(str))+1);
    this_player()->set("wp_free", freeslots-1);
    tell_object(this_player(), str+" selected.\n");
    return 1;
}
