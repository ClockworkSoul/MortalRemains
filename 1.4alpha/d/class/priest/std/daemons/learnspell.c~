#include <priest_spheres.h>


string learn_spell(){


int level, i, flag, maxlvl, *spell_level;
object guildob;
string *majorspheres, *minorspheres,  *spells, *known_spells, *sphere_spells;
string thissphere;
mapping spheres;

level = TP->query_level("priest");
if (TP->query_level("ranger") || TP->query_level("paladin") || TP->query_level("knight") ){
level = TP->query_level() - 8;
}
if (!level){
write ("Why you have no priest lvl!???\n");
return 0;
}
guildob = present("#CLASS_OBJECT#", TP);
if (!guildob){
write ("Why you have no class ob!???\n");
return 0;
}
majorspheres = guildob->query("major");
minorspheres = guildob->query("minor");
known_spells = TP->query("priest_spells");
spells = ({});

flag++;
  while(flag) {
    switch(flag) {
      case 1 : spheres = ALL; thissphere = "all"; break;
      case 2 : spheres = ANIMAL;thissphere = "animal";break;
      case 3 : spheres = ASTRAL ;thissphere = "astral"; break;
      case 4 : spheres = CHAOS ;thissphere = "chaos"; break;
      case 5 : spheres = CHARM ;thissphere = "charm"; break;
      case 6 : spheres = COMBAT;thissphere = "combat"; break;
      case 7 : spheres = CREATION;thissphere = "creation"; break;
      case 8 : spheres = DIVINATION; thissphere = "divination";break;
      case 9 : spheres = AIR;thissphere = "air"; break;
      case 10 : spheres = EARTH ;thissphere = "earth"; break;
      case 11 : spheres = FIRE ;thissphere = "fire";break;
      case 12 : spheres = WATER ;thissphere = "water"; break;
      case 13 : spheres = GUARDIAN;thissphere = "guardian"; break;
      case 14 : spheres = HEALING;thissphere = "healing"; break;
      case 15 : spheres = LAW;thissphere = "law"; break;
      case 16 : spheres = NECROMANTIC;thissphere = "necromantic"; break;
      case 17 : spheres = NUMBERS ;thissphere = "numbers"; break;
      case 18 : spheres = PLANT ;thissphere = "plant"; break;
      case 19 : spheres = PROTECTION ;thissphere = "protection"; break;
      case 20 : spheres = SUMMONING;thissphere = "summoning"; break;
      case 21 : spheres = SUN;thissphere = "sun"; break;
      case 22 : spheres = THOUGHT;thissphere = "thought"; break;
      case 23 : spheres = TIME;thissphere = "time"; break;
      case 24 : spheres = TRAVELERS ;thissphere = "travelers"; break;
      case 25 : spheres = WAR ;thissphere = "war"; break;
      case 26 : spheres = WARDS ;thissphere = "wards"; break;
      case 27 : spheres = WEATHER;thissphere = "weather"; break;
      default : flag = (-1); break;
    } 
    if ( (member_array(thissphere, majorspheres) != -1) ||
    (member_array(thissphere, minorspheres) != -1) ){
     maxlvl = (level / 2);
    if ((maxlvl > 6)&&(this_player()->query("stat/wisdom")< 18)) maxlvl = 6;
	if ((maxlvl > 5)&&(this_player()->query("stat/wisdom")< 17)) maxlvl = 5;
    if ((maxlvl > 5)&& (member_array(thissphere, minorspheres) != -1) ) maxlvl = 3;
   
    
    //please note that the initial spells are given by the individual guilds
    //so there is no need to check if maxlvl is 0
	

		spell_level = values(spheres);
		sphere_spells = keys(spheres);
		for (i=0;i<sizeof(spheres);i++){
			if ((spell_level[i] < (maxlvl+1)) &&
				(member_array(sphere_spells[i], known_spells) == -1) ){
		spells += ({ sphere_spells[i] });
		}
	}
}	
	flag++;
}
	

	//hopefully now we have an array of learnable spells!

i = random(sizeof(spells));
if (i == 0) return "bless";
thissphere = spells[i];

return thissphere;
}

